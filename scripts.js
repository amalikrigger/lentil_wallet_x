const client = require('./public/client');
(async () => {
    console.log("a");
    const senderAccount = await client.fetchAccount("http://localhost:3000/accounts/gfranklin");
    const receiverAccount = await client.fetchAccount("http://localhost:4000/accounts/asmith");
    const clientAccount = await client.fetchAccount("http://localhost:4000/accounts/pfry");
    console.log("senderAccount: ", senderAccount);
    console.log("receiverAccount: ", receiverAccount);
    console.log("clientAccount: ", clientAccount);
    const grantRequest = await client.makeIncomingPaymentGrantRequest(clientAccount);
    console.log("grantRequest: ", JSON.stringify(grantRequest));
    const expirationTomorrow = new Date();
    expirationTomorrow.setDate(expirationTomorrow.getDate() + 1);
    const payment = await client.createIncomingPayment(receiverAccount, expirationTomorrow, "Test payment", grantRequest["response"]["access_token"]["value"]);
    console.log("payment", payment);
    const incomingPaymentUrl = payment["id"];
    const grantRequestOutgoing = await client.makeOutgoingPaymentGrantRequest(clientAccount, senderAccount);
    console.log(JSON.stringify(grantRequestOutgoing));
    const continueToken = grantRequestOutgoing["continue"]["access_token"]["value"];
    const continueUri = grantRequestOutgoing["continue"]["uri"];
    const continuation = await client.continueOutgoingPayment(continueUri, continueToken);
    console.log(continuation);
    const continuationToken = continuation["access_token"]["value"];
    const outgoingPayment = await client.createOutgoingPayment(senderAccount, receiverAccount, incomingPaymentUrl, continuationToken);
    console.log(outgoingPayment);
})();
